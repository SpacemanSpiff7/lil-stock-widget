{"ast":null,"code":"// src/DataFetch.ts\n\nexport class DataFetcher {\n  constructor() {\n    this.apiKey = null;\n    this.provider = 'alphavantage';\n    this.apiKey = sessionStorage.getItem('finance-api-key');\n  }\n  setApiKey(key, provider) {\n    this.apiKey = key;\n    this.provider = provider;\n    sessionStorage.setItem('finance-api-key', key);\n    sessionStorage.setItem('finance-api-provider', provider);\n  }\n  clearApiKey() {\n    this.apiKey = null;\n    sessionStorage.removeItem('finance-api-key');\n    sessionStorage.removeItem('finance-api-provider');\n  }\n  hasApiKey() {\n    return !!this.apiKey;\n  }\n  async fetchStockData(ticker) {\n    if (!this.apiKey) {\n      throw new Error('API key not set');\n    }\n    const provider = sessionStorage.getItem('finance-api-provider') || 'alphavantage';\n    if (provider === 'alphavantage') {\n      return this.fetchFromAlphaVantage(ticker);\n    } else {\n      return this.fetchFromPolygon(ticker);\n    }\n  }\n  async fetchFromAlphaVantage(ticker) {\n    const timeSeriesUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${this.apiKey}&outputsize=full`;\n    const overviewUrl = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${ticker}&apikey=${this.apiKey}`;\n    try {\n      var _prices;\n      const [timeSeriesResponse, overviewResponse] = await Promise.all([fetch(timeSeriesUrl), fetch(overviewUrl)]);\n      const timeSeriesData = await timeSeriesResponse.json();\n      const overviewData = await overviewResponse.json();\n      if (timeSeriesData.Note) {\n        throw new Error('Rate limit exceeded. Please wait and try again.');\n      }\n      if (timeSeriesData.Error) {\n        throw new Error(timeSeriesData.Error);\n      }\n      const timeSeries = timeSeriesData['Time Series (Daily)'];\n      if (!timeSeries) {\n        throw new Error('Invalid ticker symbol or no data available');\n      }\n      const dates = Object.keys(timeSeries).sort();\n      const prices = dates.map(date => ({\n        date: new Date(date),\n        open: parseFloat(timeSeries[date]['1. open']),\n        high: parseFloat(timeSeries[date]['2. high']),\n        low: parseFloat(timeSeries[date]['3. low']),\n        close: parseFloat(timeSeries[date]['4. close']),\n        volume: parseInt(timeSeries[date]['5. volume'])\n      }));\n      const latestPrice = ((_prices = prices[prices.length - 1]) === null || _prices === void 0 ? void 0 : _prices.close) || 0;\n      return {\n        ticker,\n        currentPrice: latestPrice,\n        prices,\n        fundamentals: {\n          pe: parseFloat(overviewData.PERatio) || null,\n          pb: parseFloat(overviewData.PriceToBookRatio) || null,\n          peg: parseFloat(overviewData.PEGRatio) || null,\n          dividendYield: parseFloat(overviewData.DividendYield) || null,\n          marketCap: parseFloat(overviewData.MarketCapitalization) || null,\n          eps: parseFloat(overviewData.EPS) || null\n        }\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to fetch stock data');\n    }\n  }\n  async fetchFromPolygon(ticker) {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    const aggregatesUrl = `https://api.polygon.io/v2/aggs/ticker/${ticker}/range/1/day/${startDate}/${endDate}?adjusted=true&sort=asc&limit=50000&apikey=${this.apiKey}`;\n    const tickerDetailsUrl = `https://api.polygon.io/v3/reference/tickers/${ticker}?apikey=${this.apiKey}`;\n    const financialsUrl = `https://api.polygon.io/v2/reference/financials/${ticker}?apikey=${this.apiKey}`;\n    try {\n      var _prices2;\n      const [aggregatesResponse, tickerDetailsResponse, financialsResponse] = await Promise.all([fetch(aggregatesUrl), fetch(tickerDetailsUrl), fetch(financialsUrl)]);\n      const aggregatesData = await aggregatesResponse.json();\n      const tickerDetailsData = await tickerDetailsResponse.json();\n      const financialsData = await financialsResponse.json();\n      if (aggregatesData.status === 'ERROR') {\n        throw new Error(aggregatesData.error || 'API error');\n      }\n      if (!aggregatesData.results || aggregatesData.results.length === 0) {\n        throw new Error('No data available for this ticker');\n      }\n      const prices = aggregatesData.results.map(result => ({\n        date: new Date(result.t),\n        open: result.o,\n        high: result.h,\n        low: result.l,\n        close: result.c,\n        volume: result.v\n      }));\n      const latestPrice = ((_prices2 = prices[prices.length - 1]) === null || _prices2 === void 0 ? void 0 : _prices2.close) || 0;\n\n      // Extract fundamental data\n      let fundamentals = {\n        pe: null,\n        pb: null,\n        peg: null,\n        dividendYield: null,\n        marketCap: null,\n        eps: null\n      };\n\n      // Get market cap from ticker details\n      if (tickerDetailsData.results) {\n        const details = tickerDetailsData.results;\n        fundamentals.marketCap = details.market_cap || null;\n      }\n\n      // Get financial metrics from financials data\n      if (financialsData.results && financialsData.results.length > 0) {\n        const latestFinancials = financialsData.results[0];\n\n        // Calculate P/E ratio if we have earnings data\n        if (latestFinancials.earnings_per_share && latestPrice > 0) {\n          fundamentals.eps = latestFinancials.earnings_per_share;\n          fundamentals.pe = latestPrice / latestFinancials.earnings_per_share;\n        }\n\n        // Get other metrics if available\n        if (latestFinancials.price_to_book) {\n          fundamentals.pb = latestFinancials.price_to_book;\n        }\n        if (latestFinancials.price_to_earnings_growth) {\n          fundamentals.peg = latestFinancials.price_to_earnings_growth;\n        }\n        if (latestFinancials.dividend_yield) {\n          fundamentals.dividendYield = latestFinancials.dividend_yield;\n        }\n      }\n      return {\n        ticker,\n        currentPrice: latestPrice,\n        prices,\n        fundamentals\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to fetch stock data from Polygon');\n    }\n  }\n}","map":{"version":3,"names":["DataFetcher","constructor","apiKey","provider","sessionStorage","getItem","setApiKey","key","setItem","clearApiKey","removeItem","hasApiKey","fetchStockData","ticker","Error","fetchFromAlphaVantage","fetchFromPolygon","timeSeriesUrl","overviewUrl","_prices","timeSeriesResponse","overviewResponse","Promise","all","fetch","timeSeriesData","json","overviewData","Note","timeSeries","dates","Object","keys","sort","prices","map","date","Date","open","parseFloat","high","low","close","volume","parseInt","latestPrice","length","currentPrice","fundamentals","pe","PERatio","pb","PriceToBookRatio","peg","PEGRatio","dividendYield","DividendYield","marketCap","MarketCapitalization","eps","EPS","error","endDate","toISOString","split","startDate","now","aggregatesUrl","tickerDetailsUrl","financialsUrl","_prices2","aggregatesResponse","tickerDetailsResponse","financialsResponse","aggregatesData","tickerDetailsData","financialsData","status","results","result","t","o","h","l","c","v","details","market_cap","latestFinancials","earnings_per_share","price_to_book","price_to_earnings_growth","dividend_yield"],"sources":["/Users/slongo/Documents/simone_misc/stock_widget/src/DataFetch.ts"],"sourcesContent":["// src/DataFetch.ts\nexport type ApiProvider = 'alphavantage' | 'polygon';\n\nexport interface PricePoint {\n  date: Date;\n  open: number;\n  high: number;\n  low: number;\n  close: number;\n  volume: number;\n}\n\nexport interface Fundamentals {\n  pe: number | null;\n  pb: number | null;\n  peg: number | null;\n  dividendYield: number | null;\n  marketCap: number | null;\n  eps: number | null;\n}\n\nexport interface StockData {\n  ticker: string;\n  currentPrice: number;\n  prices: PricePoint[];\n  fundamentals: Fundamentals;\n}\n\nexport class DataFetcher {\n  private apiKey: string | null = null;\n  private provider: ApiProvider = 'alphavantage';\n\n  constructor() {\n    this.apiKey = sessionStorage.getItem('finance-api-key');\n  }\n\n  setApiKey(key: string, provider: ApiProvider) {\n    this.apiKey = key;\n    this.provider = provider;\n    sessionStorage.setItem('finance-api-key', key);\n    sessionStorage.setItem('finance-api-provider', provider);\n  }\n\n  clearApiKey() {\n    this.apiKey = null;\n    sessionStorage.removeItem('finance-api-key');\n    sessionStorage.removeItem('finance-api-provider');\n  }\n\n  hasApiKey(): boolean {\n    return !!this.apiKey;\n  }\n\n  async fetchStockData(ticker: string): Promise<StockData> {\n    if (!this.apiKey) {\n      throw new Error('API key not set');\n    }\n\n    const provider = sessionStorage.getItem('finance-api-provider') as ApiProvider || 'alphavantage';\n    \n    if (provider === 'alphavantage') {\n      return this.fetchFromAlphaVantage(ticker);\n    } else {\n      return this.fetchFromPolygon(ticker);\n    }\n  }\n\n  private async fetchFromAlphaVantage(ticker: string): Promise<StockData> {\n    const timeSeriesUrl = `https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${ticker}&apikey=${this.apiKey}&outputsize=full`;\n    const overviewUrl = `https://www.alphavantage.co/query?function=OVERVIEW&symbol=${ticker}&apikey=${this.apiKey}`;\n\n    try {\n      const [timeSeriesResponse, overviewResponse] = await Promise.all([\n        fetch(timeSeriesUrl),\n        fetch(overviewUrl)\n      ]);\n\n      const timeSeriesData = await timeSeriesResponse.json();\n      const overviewData = await overviewResponse.json();\n\n      if (timeSeriesData.Note) {\n        throw new Error('Rate limit exceeded. Please wait and try again.');\n      }\n\n      if (timeSeriesData.Error) {\n        throw new Error(timeSeriesData.Error);\n      }\n\n      const timeSeries = timeSeriesData['Time Series (Daily)'];\n      if (!timeSeries) {\n        throw new Error('Invalid ticker symbol or no data available');\n      }\n\n      const dates = Object.keys(timeSeries).sort();\n      const prices = dates.map(date => ({\n        date: new Date(date),\n        open: parseFloat(timeSeries[date]['1. open']),\n        high: parseFloat(timeSeries[date]['2. high']),\n        low: parseFloat(timeSeries[date]['3. low']),\n        close: parseFloat(timeSeries[date]['4. close']),\n        volume: parseInt(timeSeries[date]['5. volume'])\n      }));\n\n      const latestPrice = prices[prices.length - 1]?.close || 0;\n\n      return {\n        ticker,\n        currentPrice: latestPrice,\n        prices,\n        fundamentals: {\n          pe: parseFloat(overviewData.PERatio) || null,\n          pb: parseFloat(overviewData.PriceToBookRatio) || null,\n          peg: parseFloat(overviewData.PEGRatio) || null,\n          dividendYield: parseFloat(overviewData.DividendYield) || null,\n          marketCap: parseFloat(overviewData.MarketCapitalization) || null,\n          eps: parseFloat(overviewData.EPS) || null\n        }\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to fetch stock data');\n    }\n  }\n\n  private async fetchFromPolygon(ticker: string): Promise<StockData> {\n    const endDate = new Date().toISOString().split('T')[0];\n    const startDate = new Date(Date.now() - 365 * 24 * 60 * 60 * 1000).toISOString().split('T')[0];\n    \n    const aggregatesUrl = `https://api.polygon.io/v2/aggs/ticker/${ticker}/range/1/day/${startDate}/${endDate}?adjusted=true&sort=asc&limit=50000&apikey=${this.apiKey}`;\n    const tickerDetailsUrl = `https://api.polygon.io/v3/reference/tickers/${ticker}?apikey=${this.apiKey}`;\n    const financialsUrl = `https://api.polygon.io/v2/reference/financials/${ticker}?apikey=${this.apiKey}`;\n\n    try {\n      const [aggregatesResponse, tickerDetailsResponse, financialsResponse] = await Promise.all([\n        fetch(aggregatesUrl),\n        fetch(tickerDetailsUrl),\n        fetch(financialsUrl)\n      ]);\n\n      const aggregatesData = await aggregatesResponse.json();\n      const tickerDetailsData = await tickerDetailsResponse.json();\n      const financialsData = await financialsResponse.json();\n\n      if (aggregatesData.status === 'ERROR') {\n        throw new Error(aggregatesData.error || 'API error');\n      }\n\n      if (!aggregatesData.results || aggregatesData.results.length === 0) {\n        throw new Error('No data available for this ticker');\n      }\n\n      const prices = aggregatesData.results.map((result: any) => ({\n        date: new Date(result.t),\n        open: result.o,\n        high: result.h,\n        low: result.l,\n        close: result.c,\n        volume: result.v\n      }));\n\n      const latestPrice = prices[prices.length - 1]?.close || 0;\n\n      // Extract fundamental data\n      let fundamentals: Fundamentals = {\n        pe: null,\n        pb: null,\n        peg: null,\n        dividendYield: null,\n        marketCap: null,\n        eps: null\n      };\n\n      // Get market cap from ticker details\n      if (tickerDetailsData.results) {\n        const details = tickerDetailsData.results;\n        fundamentals.marketCap = details.market_cap || null;\n      }\n\n      // Get financial metrics from financials data\n      if (financialsData.results && financialsData.results.length > 0) {\n        const latestFinancials = financialsData.results[0];\n        \n        // Calculate P/E ratio if we have earnings data\n        if (latestFinancials.earnings_per_share && latestPrice > 0) {\n          fundamentals.eps = latestFinancials.earnings_per_share;\n          fundamentals.pe = latestPrice / latestFinancials.earnings_per_share;\n        }\n\n        // Get other metrics if available\n        if (latestFinancials.price_to_book) {\n          fundamentals.pb = latestFinancials.price_to_book;\n        }\n\n        if (latestFinancials.price_to_earnings_growth) {\n          fundamentals.peg = latestFinancials.price_to_earnings_growth;\n        }\n\n        if (latestFinancials.dividend_yield) {\n          fundamentals.dividendYield = latestFinancials.dividend_yield;\n        }\n      }\n\n      return {\n        ticker,\n        currentPrice: latestPrice,\n        prices,\n        fundamentals\n      };\n    } catch (error) {\n      if (error instanceof Error) {\n        throw error;\n      }\n      throw new Error('Failed to fetch stock data from Polygon');\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}