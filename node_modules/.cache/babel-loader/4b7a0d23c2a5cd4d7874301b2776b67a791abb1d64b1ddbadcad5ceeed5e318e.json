{"ast":null,"code":"var _jsxFileName = \"/Users/slongo/Documents/simone_misc/stock_widget/src/Charts.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$(),\n  _s5 = $RefreshSig$(),\n  _s6 = $RefreshSig$(),\n  _s7 = $RefreshSig$();\n// src/Charts.tsx\nimport React, { useEffect, useRef } from 'react';\n\n// Declare Plotly as global\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const HistoricalChart = ({\n  prices,\n  trend,\n  isDarkMode\n}) => {\n  _s();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || prices.length === 0 || !window.Plotly) return;\n    const dates = prices.map(p => p.date.toISOString().split('T')[0]);\n    const closes = prices.map(p => p.close);\n    const opens = prices.map(p => p.open);\n    const highs = prices.map(p => p.high);\n    const lows = prices.map(p => p.low);\n\n    // Create trend line\n    const trendLine = Array.from({\n      length: prices.length\n    }, (_, i) => {\n      const progress = i / (prices.length - 1);\n      return closes[0] + (trend - closes[0]) * progress;\n    });\n    const candlestickTrace = {\n      x: dates,\n      open: opens,\n      high: highs,\n      low: lows,\n      close: closes,\n      type: 'candlestick',\n      name: 'Price',\n      increasing: {\n        line: {\n          color: '#00ff88'\n        }\n      },\n      decreasing: {\n        line: {\n          color: '#ff4444'\n        }\n      }\n    };\n    const trendTrace = {\n      x: dates,\n      y: trendLine,\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Trend',\n      line: {\n        color: '#ffa500',\n        width: 2,\n        dash: 'dash'\n      }\n    };\n    const layout = {\n      title: 'Historical Price with Trend',\n      xaxis: {\n        title: 'Date'\n      },\n      yaxis: {\n        title: 'Price ($)'\n      },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [candlestickTrace, trendTrace], layout);\n  }, [prices, trend, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 10\n  }, this);\n};\n_s(HistoricalChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c = HistoricalChart;\nexport const VolatilityChart = ({\n  prices,\n  volatilities,\n  regimes,\n  isDarkMode\n}) => {\n  _s2();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || prices.length === 0 || !window.Plotly) return;\n    const dates = prices.map(p => p.date.toISOString().split('T')[0]);\n    const closes = prices.map(p => p.close);\n\n    // Create background shading for regimes\n    const shapes = [];\n    let currentRegime = regimes[0];\n    let shapeStart = 0;\n    for (let i = 1; i < regimes.length; i++) {\n      if (regimes[i] !== currentRegime) {\n        shapes.push({\n          type: 'rect',\n          xref: 'x',\n          yref: 'paper',\n          x0: dates[shapeStart],\n          x1: dates[i - 1],\n          y0: 0,\n          y1: 1,\n          fillcolor: currentRegime > 0 ? 'rgba(0, 255, 136, 0.1)' : 'rgba(255, 68, 68, 0.1)',\n          line: {\n            width: 0\n          }\n        });\n        shapeStart = i;\n        currentRegime = regimes[i];\n      }\n    }\n\n    // Add final shape\n    shapes.push({\n      type: 'rect',\n      xref: 'x',\n      yref: 'paper',\n      x0: dates[shapeStart],\n      x1: dates[dates.length - 1],\n      y0: 0,\n      y1: 1,\n      fillcolor: currentRegime > 0 ? 'rgba(0, 255, 136, 0.1)' : 'rgba(255, 68, 68, 0.1)',\n      line: {\n        width: 0\n      }\n    });\n    const priceTrace = {\n      x: dates,\n      y: closes,\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Price',\n      line: {\n        color: '#4a90e2'\n      },\n      yaxis: 'y'\n    };\n    const volatilityTrace = {\n      x: dates.slice(1),\n      // Volatility has one less point\n      y: volatilities.map(v => v * 100),\n      // Convert to percentage\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Volatility (%)',\n      line: {\n        color: '#ff6b6b'\n      },\n      yaxis: 'y2'\n    };\n    const layout = {\n      title: 'Price with Rolling Volatility and Regime Detection',\n      xaxis: {\n        title: 'Date'\n      },\n      yaxis: {\n        title: 'Price ($)',\n        side: 'left'\n      },\n      yaxis2: {\n        title: 'Volatility (%)',\n        overlaying: 'y',\n        side: 'right'\n      },\n      shapes,\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [priceTrace, volatilityTrace], layout);\n  }, [prices, volatilities, regimes, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 10\n  }, this);\n};\n_s2(VolatilityChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c2 = VolatilityChart;\nexport const MonteCarloPathsChart = ({\n  paths,\n  initialPrice,\n  isDarkMode\n}) => {\n  _s3();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || paths.length === 0 || !window.Plotly) return;\n    const numSteps = paths[0].length;\n    const xValues = Array.from({\n      length: numSteps\n    }, (_, i) => i);\n\n    // Plot first 50 paths with transparency\n    const traces = paths.slice(0, 50).map((path, i) => ({\n      x: xValues,\n      y: path,\n      type: 'scatter',\n      mode: 'lines',\n      name: `Path ${i + 1}`,\n      line: {\n        color: `rgba(74, 144, 226, 0.3)`,\n        width: 1\n      },\n      showlegend: false\n    }));\n\n    // Add upside and downside reference lines\n    const upsideLine = {\n      x: [0, numSteps - 1],\n      y: [initialPrice * 1.2, initialPrice * 1.2],\n      type: 'scatter',\n      mode: 'lines',\n      name: '+20% Target',\n      line: {\n        color: '#00ff88',\n        width: 2,\n        dash: 'dash'\n      }\n    };\n    const downsideLine = {\n      x: [0, numSteps - 1],\n      y: [initialPrice * 0.9, initialPrice * 0.9],\n      type: 'scatter',\n      mode: 'lines',\n      name: '-10% Stop',\n      line: {\n        color: '#ff4444',\n        width: 2,\n        dash: 'dash'\n      }\n    };\n    const layout = {\n      title: 'Monte Carlo Price Paths (50 sample paths)',\n      xaxis: {\n        title: 'Days'\n      },\n      yaxis: {\n        title: 'Price ($)'\n      },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [...traces, upsideLine, downsideLine], layout);\n  }, [paths, initialPrice, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 227,\n    columnNumber: 10\n  }, this);\n};\n_s3(MonteCarloPathsChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c3 = MonteCarloPathsChart;\nexport const DistributionChart = ({\n  histogram,\n  initialPrice,\n  isDarkMode\n}) => {\n  _s4();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || histogram.length === 0 || !window.Plotly) return;\n    const histogramTrace = {\n      x: histogram.map(h => h.bin),\n      y: histogram.map(h => h.count),\n      type: 'bar',\n      name: 'Distribution',\n      marker: {\n        color: '#4a90e2',\n        opacity: 0.7\n      }\n    };\n    const upsideLine = {\n      x: [initialPrice * 1.2, initialPrice * 1.2],\n      y: [0, Math.max(...histogram.map(h => h.count))],\n      type: 'scatter',\n      mode: 'lines',\n      name: '+20% Target',\n      line: {\n        color: '#00ff88',\n        width: 3\n      }\n    };\n    const downsideLine = {\n      x: [initialPrice * 0.9, initialPrice * 0.9],\n      y: [0, Math.max(...histogram.map(h => h.count))],\n      type: 'scatter',\n      mode: 'lines',\n      name: '-10% Stop',\n      line: {\n        color: '#ff4444',\n        width: 3\n      }\n    };\n    const layout = {\n      title: 'Distribution of Final Prices',\n      xaxis: {\n        title: 'Price ($)'\n      },\n      yaxis: {\n        title: 'Frequency'\n      },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [histogramTrace, upsideLine, downsideLine], layout);\n  }, [histogram, initialPrice, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 282,\n    columnNumber: 10\n  }, this);\n};\n\n// New advanced chart components\n_s4(DistributionChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c4 = DistributionChart;\nexport const PerformanceMetricsChart = ({\n  metrics,\n  isDarkMode\n}) => {\n  _s5();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || !window.Plotly) return;\n    const metricNames = ['Sharpe', 'Sortino', 'Calmar', 'Information', 'Treynor'];\n    const metricValues = [metrics.sharpeRatio, metrics.sortinoRatio, metrics.calmarRatio, metrics.informationRatio, metrics.treynorRatio];\n    const trace = {\n      x: metricNames,\n      y: metricValues,\n      type: 'bar',\n      marker: {\n        color: metricValues.map(v => v > 0 ? '#00ff88' : '#ff4444'),\n        opacity: 0.8\n      },\n      name: 'Performance Ratios'\n    };\n    const layout = {\n      title: 'Performance Metrics',\n      xaxis: {\n        title: 'Metric'\n      },\n      yaxis: {\n        title: 'Ratio Value'\n      },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [trace], layout);\n  }, [metrics, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 332,\n    columnNumber: 10\n  }, this);\n};\n_s5(PerformanceMetricsChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c5 = PerformanceMetricsChart;\nexport const StressTestChart = ({\n  results,\n  isDarkMode\n}) => {\n  _s6();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || results.length === 0 || !window.Plotly) return;\n    const scenarioNames = results.map(r => r.scenario.name);\n    const var95Values = results.map(r => r.var95);\n    const var99Values = results.map(r => r.var99);\n    const var95Trace = {\n      x: scenarioNames,\n      y: var95Values,\n      type: 'bar',\n      name: 'VaR (95%)',\n      marker: {\n        color: '#ff6b6b',\n        opacity: 0.8\n      }\n    };\n    const var99Trace = {\n      x: scenarioNames,\n      y: var99Values,\n      type: 'bar',\n      name: 'VaR (99%)',\n      marker: {\n        color: '#ff4444',\n        opacity: 0.8\n      }\n    };\n    const layout = {\n      title: 'Stress Test Results',\n      xaxis: {\n        title: 'Scenario'\n      },\n      yaxis: {\n        title: 'Value at Risk ($)'\n      },\n      barmode: 'group',\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: {\n        color: isDarkMode ? 'white' : 'black'\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, [var95Trace, var99Trace], layout);\n  }, [results, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 381,\n    columnNumber: 10\n  }, this);\n};\n_s6(StressTestChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c6 = StressTestChart;\nexport const RegimeAnalysisChart = ({\n  analysis,\n  isDarkMode\n}) => {\n  _s7();\n  const chartRef = useRef(null);\n  useEffect(() => {\n    if (!chartRef.current || !window.Plotly) return;\n\n    // Create multiple subplots\n    const fig = {\n      data: [\n      // Regime probabilities pie chart\n      {\n        values: [analysis.bullMarketProbability, analysis.bearMarketProbability],\n        labels: ['Bull Market', 'Bear Market'],\n        type: 'pie',\n        name: 'Regime Probabilities',\n        domain: {\n          row: 0,\n          column: 0\n        },\n        marker: {\n          colors: ['#00ff88', '#ff4444']\n        }\n      },\n      // Regime durations bar chart\n      {\n        x: ['Bull', 'Bear'],\n        y: [analysis.regimeDuration.bull, analysis.regimeDuration.bear],\n        type: 'bar',\n        name: 'Avg Duration (days)',\n        domain: {\n          row: 0,\n          column: 1\n        },\n        marker: {\n          color: ['#00ff88', '#ff4444']\n        }\n      },\n      // Regime volatility\n      {\n        x: ['Bull', 'Bear'],\n        y: [analysis.regimeVolatility.bull * 100, analysis.regimeVolatility.bear * 100],\n        type: 'bar',\n        name: 'Volatility (%)',\n        domain: {\n          row: 1,\n          column: 0\n        },\n        marker: {\n          color: ['#4a90e2', '#ff6b6b']\n        }\n      },\n      // Regime returns\n      {\n        x: ['Bull', 'Bear'],\n        y: [analysis.regimeReturns.bull * 100, analysis.regimeReturns.bear * 100],\n        type: 'bar',\n        name: 'Returns (%)',\n        domain: {\n          row: 1,\n          column: 1\n        },\n        marker: {\n          color: ['#00ff88', '#ff4444']\n        }\n      }],\n      layout: {\n        title: 'Regime Analysis',\n        grid: {\n          rows: 2,\n          columns: 2,\n          pattern: 'independent'\n        },\n        paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n        plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n        font: {\n          color: isDarkMode ? 'white' : 'black'\n        }\n      }\n    };\n    window.Plotly.newPlot(chartRef.current, fig.data, fig.layout);\n  }, [analysis, isDarkMode]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: chartRef,\n    className: \"w-full h-96\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 10\n  }, this);\n};\n_s7(RegimeAnalysisChart, \"X+1SfQQ6xefXNU27aQW843M7cTw=\");\n_c7 = RegimeAnalysisChart;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"HistoricalChart\");\n$RefreshReg$(_c2, \"VolatilityChart\");\n$RefreshReg$(_c3, \"MonteCarloPathsChart\");\n$RefreshReg$(_c4, \"DistributionChart\");\n$RefreshReg$(_c5, \"PerformanceMetricsChart\");\n$RefreshReg$(_c6, \"StressTestChart\");\n$RefreshReg$(_c7, \"RegimeAnalysisChart\");","map":{"version":3,"names":["React","useEffect","useRef","jsxDEV","_jsxDEV","HistoricalChart","prices","trend","isDarkMode","_s","chartRef","current","length","window","Plotly","dates","map","p","date","toISOString","split","closes","close","opens","open","highs","high","lows","low","trendLine","Array","from","_","i","progress","candlestickTrace","x","type","name","increasing","line","color","decreasing","trendTrace","y","mode","width","dash","layout","title","xaxis","yaxis","paper_bgcolor","plot_bgcolor","font","newPlot","ref","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","VolatilityChart","volatilities","regimes","_s2","shapes","currentRegime","shapeStart","push","xref","yref","x0","x1","y0","y1","fillcolor","priceTrace","volatilityTrace","slice","v","side","yaxis2","overlaying","_c2","MonteCarloPathsChart","paths","initialPrice","_s3","numSteps","xValues","traces","path","showlegend","upsideLine","downsideLine","_c3","DistributionChart","histogram","_s4","histogramTrace","h","bin","count","marker","opacity","Math","max","_c4","PerformanceMetricsChart","metrics","_s5","metricNames","metricValues","sharpeRatio","sortinoRatio","calmarRatio","informationRatio","treynorRatio","trace","_c5","StressTestChart","results","_s6","scenarioNames","r","scenario","var95Values","var95","var99Values","var99","var95Trace","var99Trace","barmode","_c6","RegimeAnalysisChart","analysis","_s7","fig","data","values","bullMarketProbability","bearMarketProbability","labels","domain","row","column","colors","regimeDuration","bull","bear","regimeVolatility","regimeReturns","grid","rows","columns","pattern","_c7","$RefreshReg$"],"sources":["/Users/slongo/Documents/simone_misc/stock_widget/src/Charts.tsx"],"sourcesContent":["// src/Charts.tsx\nimport React, { useEffect, useRef } from 'react';\nimport { PricePoint } from './DataFetch';\nimport { PerformanceMetrics, StressTestResult, RegimeAnalysis } from './types';\n\n// Declare Plotly as global\ndeclare global {\n  interface Window {\n    Plotly: any;\n  }\n}\n\ninterface HistoricalChartProps {\n  prices: PricePoint[];\n  trend: number;\n  isDarkMode: boolean;\n}\n\nexport const HistoricalChart: React.FC<HistoricalChartProps> = ({ prices, trend, isDarkMode }) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || prices.length === 0 || !window.Plotly) return;\n\n    const dates = prices.map(p => p.date.toISOString().split('T')[0]);\n    const closes = prices.map(p => p.close);\n    const opens = prices.map(p => p.open);\n    const highs = prices.map(p => p.high);\n    const lows = prices.map(p => p.low);\n\n    // Create trend line\n    const trendLine = Array.from({ length: prices.length }, (_, i) => {\n      const progress = i / (prices.length - 1);\n      return closes[0] + (trend - closes[0]) * progress;\n    });\n\n    const candlestickTrace = {\n      x: dates,\n      open: opens,\n      high: highs,\n      low: lows,\n      close: closes,\n      type: 'candlestick',\n      name: 'Price',\n      increasing: { line: { color: '#00ff88' } },\n      decreasing: { line: { color: '#ff4444' } }\n    };\n\n    const trendTrace = {\n      x: dates,\n      y: trendLine,\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Trend',\n      line: { color: '#ffa500', width: 2, dash: 'dash' }\n    };\n\n    const layout = {\n      title: 'Historical Price with Trend',\n      xaxis: { title: 'Date' },\n      yaxis: { title: 'Price ($)' },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [candlestickTrace, trendTrace], layout);\n  }, [prices, trend, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\ninterface VolatilityChartProps {\n  prices: PricePoint[];\n  volatilities: number[];\n  regimes: number[];\n  isDarkMode: boolean;\n}\n\nexport const VolatilityChart: React.FC<VolatilityChartProps> = ({ \n  prices, volatilities, regimes, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || prices.length === 0 || !window.Plotly) return;\n\n    const dates = prices.map(p => p.date.toISOString().split('T')[0]);\n    const closes = prices.map(p => p.close);\n\n    // Create background shading for regimes\n    const shapes: any[] = [];\n    let currentRegime = regimes[0];\n    let shapeStart = 0;\n\n    for (let i = 1; i < regimes.length; i++) {\n      if (regimes[i] !== currentRegime) {\n        shapes.push({\n          type: 'rect',\n          xref: 'x',\n          yref: 'paper',\n          x0: dates[shapeStart],\n          x1: dates[i - 1],\n          y0: 0,\n          y1: 1,\n          fillcolor: currentRegime > 0 ? 'rgba(0, 255, 136, 0.1)' : 'rgba(255, 68, 68, 0.1)',\n          line: { width: 0 }\n        });\n        shapeStart = i;\n        currentRegime = regimes[i];\n      }\n    }\n\n    // Add final shape\n    shapes.push({\n      type: 'rect',\n      xref: 'x',\n      yref: 'paper',\n      x0: dates[shapeStart],\n      x1: dates[dates.length - 1],\n      y0: 0,\n      y1: 1,\n      fillcolor: currentRegime > 0 ? 'rgba(0, 255, 136, 0.1)' : 'rgba(255, 68, 68, 0.1)',\n      line: { width: 0 }\n    });\n\n    const priceTrace = {\n      x: dates,\n      y: closes,\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Price',\n      line: { color: '#4a90e2' },\n      yaxis: 'y'\n    };\n\n    const volatilityTrace = {\n      x: dates.slice(1), // Volatility has one less point\n      y: volatilities.map(v => v * 100), // Convert to percentage\n      type: 'scatter',\n      mode: 'lines',\n      name: 'Volatility (%)',\n      line: { color: '#ff6b6b' },\n      yaxis: 'y2'\n    };\n\n    const layout = {\n      title: 'Price with Rolling Volatility and Regime Detection',\n      xaxis: { title: 'Date' },\n      yaxis: { title: 'Price ($)', side: 'left' },\n      yaxis2: {\n        title: 'Volatility (%)',\n        overlaying: 'y',\n        side: 'right'\n      },\n      shapes,\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [priceTrace, volatilityTrace], layout);\n  }, [prices, volatilities, regimes, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\ninterface MonteCarloPathsProps {\n  paths: number[][];\n  initialPrice: number;\n  isDarkMode: boolean;\n}\n\nexport const MonteCarloPathsChart: React.FC<MonteCarloPathsProps> = ({ \n  paths, initialPrice, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || paths.length === 0 || !window.Plotly) return;\n\n    const numSteps = paths[0].length;\n    const xValues = Array.from({ length: numSteps }, (_, i) => i);\n    \n    // Plot first 50 paths with transparency\n    const traces = paths.slice(0, 50).map((path, i) => ({\n      x: xValues,\n      y: path,\n      type: 'scatter',\n      mode: 'lines',\n      name: `Path ${i + 1}`,\n      line: { color: `rgba(74, 144, 226, 0.3)`, width: 1 },\n      showlegend: false\n    }));\n\n    // Add upside and downside reference lines\n    const upsideLine = {\n      x: [0, numSteps - 1],\n      y: [initialPrice * 1.2, initialPrice * 1.2],\n      type: 'scatter',\n      mode: 'lines',\n      name: '+20% Target',\n      line: { color: '#00ff88', width: 2, dash: 'dash' }\n    };\n\n    const downsideLine = {\n      x: [0, numSteps - 1],\n      y: [initialPrice * 0.9, initialPrice * 0.9],\n      type: 'scatter',\n      mode: 'lines',\n      name: '-10% Stop',\n      line: { color: '#ff4444', width: 2, dash: 'dash' }\n    };\n\n    const layout = {\n      title: 'Monte Carlo Price Paths (50 sample paths)',\n      xaxis: { title: 'Days' },\n      yaxis: { title: 'Price ($)' },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [...traces, upsideLine, downsideLine], layout);\n  }, [paths, initialPrice, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\ninterface DistributionChartProps {\n  histogram: { bin: number; count: number; }[];\n  initialPrice: number;\n  isDarkMode: boolean;\n}\n\nexport const DistributionChart: React.FC<DistributionChartProps> = ({ \n  histogram, initialPrice, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || histogram.length === 0 || !window.Plotly) return;\n\n    const histogramTrace = {\n      x: histogram.map(h => h.bin),\n      y: histogram.map(h => h.count),\n      type: 'bar',\n      name: 'Distribution',\n      marker: { color: '#4a90e2', opacity: 0.7 }\n    };\n\n    const upsideLine = {\n      x: [initialPrice * 1.2, initialPrice * 1.2],\n      y: [0, Math.max(...histogram.map(h => h.count))],\n      type: 'scatter',\n      mode: 'lines',\n      name: '+20% Target',\n      line: { color: '#00ff88', width: 3 }\n    };\n\n    const downsideLine = {\n      x: [initialPrice * 0.9, initialPrice * 0.9],\n      y: [0, Math.max(...histogram.map(h => h.count))],\n      type: 'scatter',\n      mode: 'lines',\n      name: '-10% Stop',\n      line: { color: '#ff4444', width: 3 }\n    };\n\n    const layout = {\n      title: 'Distribution of Final Prices',\n      xaxis: { title: 'Price ($)' },\n      yaxis: { title: 'Frequency' },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [histogramTrace, upsideLine, downsideLine], layout);\n  }, [histogram, initialPrice, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\n// New advanced chart components\n\ninterface PerformanceMetricsChartProps {\n  metrics: PerformanceMetrics;\n  isDarkMode: boolean;\n}\n\nexport const PerformanceMetricsChart: React.FC<PerformanceMetricsChartProps> = ({ \n  metrics, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || !window.Plotly) return;\n\n    const metricNames = ['Sharpe', 'Sortino', 'Calmar', 'Information', 'Treynor'];\n    const metricValues = [\n      metrics.sharpeRatio,\n      metrics.sortinoRatio,\n      metrics.calmarRatio,\n      metrics.informationRatio,\n      metrics.treynorRatio\n    ];\n\n    const trace = {\n      x: metricNames,\n      y: metricValues,\n      type: 'bar',\n      marker: {\n        color: metricValues.map(v => v > 0 ? '#00ff88' : '#ff4444'),\n        opacity: 0.8\n      },\n      name: 'Performance Ratios'\n    };\n\n    const layout = {\n      title: 'Performance Metrics',\n      xaxis: { title: 'Metric' },\n      yaxis: { title: 'Ratio Value' },\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [trace], layout);\n  }, [metrics, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\ninterface StressTestChartProps {\n  results: StressTestResult[];\n  isDarkMode: boolean;\n}\n\nexport const StressTestChart: React.FC<StressTestChartProps> = ({ \n  results, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || results.length === 0 || !window.Plotly) return;\n\n    const scenarioNames = results.map(r => r.scenario.name);\n    const var95Values = results.map(r => r.var95);\n    const var99Values = results.map(r => r.var99);\n\n    const var95Trace = {\n      x: scenarioNames,\n      y: var95Values,\n      type: 'bar',\n      name: 'VaR (95%)',\n      marker: { color: '#ff6b6b', opacity: 0.8 }\n    };\n\n    const var99Trace = {\n      x: scenarioNames,\n      y: var99Values,\n      type: 'bar',\n      name: 'VaR (99%)',\n      marker: { color: '#ff4444', opacity: 0.8 }\n    };\n\n    const layout = {\n      title: 'Stress Test Results',\n      xaxis: { title: 'Scenario' },\n      yaxis: { title: 'Value at Risk ($)' },\n      barmode: 'group',\n      paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n      plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n      font: { color: isDarkMode ? 'white' : 'black' }\n    };\n\n    window.Plotly.newPlot(chartRef.current, [var95Trace, var99Trace], layout);\n  }, [results, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n\ninterface RegimeAnalysisChartProps {\n  analysis: RegimeAnalysis;\n  isDarkMode: boolean;\n}\n\nexport const RegimeAnalysisChart: React.FC<RegimeAnalysisChartProps> = ({ \n  analysis, isDarkMode \n}) => {\n  const chartRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    if (!chartRef.current || !window.Plotly) return;\n\n    // Create multiple subplots\n    const fig = {\n      data: [\n        // Regime probabilities pie chart\n        {\n          values: [analysis.bullMarketProbability, analysis.bearMarketProbability],\n          labels: ['Bull Market', 'Bear Market'],\n          type: 'pie',\n          name: 'Regime Probabilities',\n          domain: { row: 0, column: 0 },\n          marker: { colors: ['#00ff88', '#ff4444'] }\n        },\n        // Regime durations bar chart\n        {\n          x: ['Bull', 'Bear'],\n          y: [analysis.regimeDuration.bull, analysis.regimeDuration.bear],\n          type: 'bar',\n          name: 'Avg Duration (days)',\n          domain: { row: 0, column: 1 },\n          marker: { color: ['#00ff88', '#ff4444'] }\n        },\n        // Regime volatility\n        {\n          x: ['Bull', 'Bear'],\n          y: [analysis.regimeVolatility.bull * 100, analysis.regimeVolatility.bear * 100],\n          type: 'bar',\n          name: 'Volatility (%)',\n          domain: { row: 1, column: 0 },\n          marker: { color: ['#4a90e2', '#ff6b6b'] }\n        },\n        // Regime returns\n        {\n          x: ['Bull', 'Bear'],\n          y: [analysis.regimeReturns.bull * 100, analysis.regimeReturns.bear * 100],\n          type: 'bar',\n          name: 'Returns (%)',\n          domain: { row: 1, column: 1 },\n          marker: { color: ['#00ff88', '#ff4444'] }\n        }\n      ],\n      layout: {\n        title: 'Regime Analysis',\n        grid: { rows: 2, columns: 2, pattern: 'independent' },\n        paper_bgcolor: isDarkMode ? '#1a1a1a' : 'white',\n        plot_bgcolor: isDarkMode ? '#2d2d2d' : 'white',\n        font: { color: isDarkMode ? 'white' : 'black' }\n      }\n    };\n\n    window.Plotly.newPlot(chartRef.current, fig.data, fig.layout);\n  }, [analysis, isDarkMode]);\n\n  return <div ref={chartRef} className=\"w-full h-96\" />;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}